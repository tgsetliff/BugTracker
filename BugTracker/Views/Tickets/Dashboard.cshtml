@model IEnumerable<BugTracker.Models.DashboardViewModel>

@{
    ViewBag.Title = "Dashboard";
}

<div class="container-fluid">
    @*<div class="row">
        <div class="col-md-12">
            <div class="panel panel-primary" style=" width:1355px; background-color:white;">
                <div class="panel-heading text-center" style="padding-right:0px; height:40px;">
                    <h3 class="text-center" style="margin-top:0px; margin-bottom:0px;">Ticket Top 10 of @Model.Count() </h3>
                </div>
            </div>
        </div>
    </div>*@

    <div class="col-md-12">
        <div class="row">
            <div class="col-md-4" style="padding-left:0px;">
                <div class="panel panel-info">
                    <div class="panel-heading text-center" style="margin-top:0px; margin-bottom:0px; height:40px;">
                        <h4 class="text-center" style="margin-top:5px; margin-bottom:5px;">Status</h4>
                    </div>
                    <div class="panel-body">
                        @{var countOpen = @Model.Where(m => m.Status == "Open").Count();}
                        <label>Open:</label>
                        <div class="pull-right">
                            @Html.Raw(countOpen)
                        </div>
                        <br />
                        @{var countResolved = @Model.Where(m => m.Status == "Resolved").Count();}
                        <label>Resolved:</label>
                        <div class="pull-right">
                            @Html.Raw(countResolved)
                        </div>
                        <br />
                        @{var countOther = @Model.Where(m => m.Status != "Open" && m.Status != "Resolved").Count();}
                        <label>Others:</label>
                        <div class="pull-right">
                            @Html.Raw(countOther)
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="panel panel-info">
                    <div class="panel-heading text-center" style="margin-top:0px; margin-bottom:0px; height:40px;">
                        <h4 class="text-center" style="margin-top:5px; margin-bottom:5px;">Priority</h4>
                    </div>
                    <div class="panel-body">
                        @{var countCritical = @Model.Where(m => m.Priority == "Critical").Count();}
                        <label>Critical:</label>
                        <div class="pull-right">
                            @Html.Raw(countCritical)
                        </div>
                        <br />
                        @{var countHigh = @Model.Where(m => m.Priority == "High").Count();}
                        <label>High:</label>
                        <div class="pull-right">
                            @Html.Raw(countHigh)
                        </div>
                        <br />
                        @{var countOtherP = @Model.Where(m => m.Priority != "Critical" && m.Priority != "High").Count();}
                        <label>Others:</label>
                        <div class="pull-right">
                            @Html.Raw(countOtherP)
                        </div>
                        <br />
                    </div>
                </div>
            </div>
            <div class="col-md-4" style="padding-right:0px;">
                <div class=" panel panel-info">
                    <div class="panel-heading text-center" style="margin-top: 0px; margin-bottom: 0px; height:40px;">
                        <h4 class="text-center" style="margin-top:5px; margin-bottom:5px;">Type</h4>
                    </div>
                    <div class="panel-body">
                        @{var countNew = @Model.Where(m => m.Type == "New Function").Count();}
                        <label>New Function:</label>
                        <div class="pull-right">
                            @Html.Raw(countNew)
                        </div>
                        <br />
                        @{var countBroke = @Model.Where(m => m.Type == "Broke Function").Count();}
                        <label>Broke Function:</label>
                        <div class="pull-right">
                            @Html.Raw(countBroke)
                        </div>
                        <br />
                        @{var countTypeO = @Model.Where(m => m.Type != "New Function" && m.Type != "Broke Function").Count();}
                        <label>Others:</label>
                        <div class="pull-right">
                            @Html.Raw(countTypeO)
                        </div>
                        <br />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <table class="table table-hover table-striped table-responsive">
        <thead>
            <tr>
                <th>
                    <span>Created</span>
                </th>
                <th>
                    <span>By</span>
                </th>
                <th>
                    <span>Title</span>
                </th>
                <th>
                    <span>Assigned To</span>
                </th>
                <th>
                    <span>Project</span>
                </th>
                <th>
                    <span>Priority</span>
                </th>
                <th>
                    <span>Status</span>
                </th>
                <th>
                    <span>Type</span>
                </th>
                <th>
                    <span>Updated</span>
                </th>
                <th></th>
            </tr>
        </thead>

        <tbody>
            @{var i = 0;}
            @foreach (var item in Model.OrderByDescending(m=> m.Created))
            {
                if (i < 10)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Created)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.OwnerUser)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Title)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.AssignedToUser)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Project)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Priority)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Status)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Type)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Updated)
                        </td>
                        <td></td>
                    </tr>
                    i++;
                }

            }
        </tbody>
    </table>
</div>